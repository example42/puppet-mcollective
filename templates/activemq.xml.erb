<!--
    File Managed By Puppet
-->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd 
    http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.base}/conf/credentials.properties</value>
        </property>      
    </bean>

    <!-- 
        The <broker> element is used to configure the ActiveMQ broker. 
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.base}/data" destroyApplicationContextOnStop="true">
 
        <!--
          For better performances use VM cursor and small memory limit.
          For more information, see:
            
          http://activemq.apache.org/message-cursors.html
            
          Also, if your producer is "hanging", it's probably due to producer 
          flow control.

          For more information, see:
          http://activemq.apache.org/producer-flow-control.html
        -->
              
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="true" memoryLimit="1mb">
                  <pendingSubscriberPolicy>
                    <vmCursor />
                  </pendingSubscriberPolicy>
                </policyEntry>
                <policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">
                  <!-- 
                    Use VM cursor for better latency
                    For more information, see:
                       
                    http://activemq.apache.org/message-cursors.html
                       
                  <pendingQueuePolicy>
                    <vmQueueCursor/>
                  </pendingQueuePolicy>
                  -->
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy> 

        <!-- 
          The managementContext is used to configure how ActiveMQ is exposed in 
          JMX. By default, ActiveMQ uses the MBean server that is started by 
          the JVM. For more information, see: 
            
          http://activemq.apache.org/jmx.html 
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <!-- 
          Configure message persistence for the broker. The default persistence
          mechanism is the KahaDB store (identified by the kahaDB tag). 
          For more information, see: 
            
          http://activemq.apache.org/persistence.html 
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.base}/data/kahadb"/>
        </persistenceAdapter>
        
        <plugins>
          <!--
            Enable the statisticsBrokerPlugin to allow ActiveMQ to collect
            statistics.
          -->
          <statisticsBrokerPlugin/>

          <!--
            Here we define a default set of users
          -->
          <simpleAuthenticationPlugin>
            <users>
              <authenticationUser username="${activemq.username}" password="${activemq.password}" groups="admins,everyone"/>
              <authenticationUser username="<%= scope.lookupvar('mcollective::stomp_user') %>" password="<%= scope.lookupvar('mcollective::stomp_password') %>" groups="mcollective,everyone"/>
              <authenticationUser username="<%= scope.lookupvar('mcollective::stomp_admin') %>" password="<%= scope.lookupvar('mcollective::stomp_admin_password') %>" groups="mcollective,admins,everyone"/>
              <authenticationUser username="<%= scope.lookupvar('mcollective::client_stomp_user') %>" password="<%= scope.lookupvar('mcollective::client_stomp_password') %>" groups="mcollective,admins,everyone"/>
            </users>
          </simpleAuthenticationPlugin>
          <authorizationPlugin>
            <map>
              <authorizationMap>
                <authorizationEntries>
                  <authorizationEntry queue=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry topic=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry queue="mcollective.>" write="admins" read="admins" admin="admins" />
                  <authorizationEntry topic="mcollective.>" write="admins" read="admins" admin="admins" />
                  <authorizationEntry queue="mcollective.nodes" read="mcollective" admin="mcollective" />
                  <authorizationEntry queue="mcollective.reply.>" write="mcollective" admin="mcollective" />
                  <authorizationEntry topic="mcollective.*.agent" read="mcollective" admin="mcollective" />
                  <authorizationEntry topic="mcollective.registration.agent" write="mcollective" read="mcollective" admin="mcollective" />
                  <authorizationEntry topic="mcollective.registration.command" write="mcollective" read="mcollective" admin="mcollective" />
                  <authorizationEntry topic="mcollective.*.command" read="mcollective" admin="mcollective" />
                  <authorizationEntry topic="ActiveMQ.Advisory.>" read="everyone" write="everyone" admin="everyone"/>
                </authorizationEntries>
              </authorizationMap>
            </map>
          </authorizationPlugin>
        </plugins>

        
        <!--
          The systemUsage controls the maximum amount of space the broker will 
          use before slowing down producers. For more information, see:
          
          http://activemq.apache.org/producer-flow-control.html
        -->
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="100 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
		  
        <!-- 
          The transport connectors expose ActiveMQ over a given protocol to
          clients and other brokers. For more information, see: 
            
          http://activemq.apache.org/configuring-transports.html 
        -->
        <transportConnectors>
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>
            <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:<%= scope.lookupvar('mcollective::stomp_port') %>"/>
        </transportConnectors>

    </broker>

    <!-- 
      Enable web consoles, REST and Ajax APIs and demos
      It also includes Camel (with its web console), see ${ACTIVEMQ_HOME}/conf/camel.xml for more info
        
      Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details 
    -->
    <import resource="jetty.xml"/>
    
</beans>
